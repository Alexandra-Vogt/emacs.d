* boot-UI
  #+BEGIN_SRC emacs-lisp
    (menu-bar-mode 0)
    (tool-bar-mode 0)
    (scroll-bar-mode -1)
    (setq inhibit-splash-screen t)
    (toggle-frame-fullscreen)

  #+END_SRC
* init
  
  #+BEGIN_SRC emacs-lisp

    (setq custom-file "~/.emacs.d/custom.el")
    ;;(load custom-file 'noerror)

    (when (string= system-name "LAP-2013-00026.efsa.eu.int")      
      (setq url-proxy-services
            '(("no_proxy" . "^\\localhost")
              ("http" . "127.0.0.1:3128")
              ("https" . "127.0.0.1:3128"))))

  #+END_SRC
  
* packages
  #+BEGIN_SRC emacs-lisp
    (require 'package)

    (add-to-list 'package-archives
                 '("melpa" . "http://melpa.org/packages/") t)
    (add-to-list 'package-archives
                 '("SC" . "http://joseito.republika.pl/sunrise-commander/") t)



    (package-initialize) 
    (if (not (package-installed-p 'use-package))
        (progn
          (package-refresh-contents)
          (package-install 'use-package)))

    (eval-when-compile
      (require 'use-package))


    (setq use-package-verbose t
          use-package-always-ensure t
          ;;use-package-debug t
          use-package-minimum-reported-time 0.05)

    (use-package use-package-chords
      :config (key-chord-mode 1))

    (require' diminish)
    (require 'bind-key)       
    (add-to-list 'load-path "/usr/share/emacs24/site-lisp/mu4e")

    (use-package auto-package-update)
    (auto-package-update-maybe)
  #+END_SRC 
* comint
#+BEGIN_SRC emacs-lisp
(add-hook 'comint-output-filter-functions #'comint-truncate-buffer)
#+END_SRC
* UI
  #+BEGIN_SRC emacs-lisp 


    (use-package ample-theme
       :init (progn (load-theme 'ample t t)
                    (enable-theme 'ample))
      :config
      (when (string= system-name "surface-linux")
        (set-frame-font "DejaVu Sans Mono-20" t t))
      (set-frame-font "Hack" t t))

    (use-package powerline
      :config
      (powerline-default-theme))


    (use-package eval-sexp-fu
       :disabled t
       :config
       (turn-on-eval-sexp-fu-flash-mode))

    (setq display-time-24hr-format t)
    (setq display-time-day-and-date t)
    (display-time-mode 1)



  #+END_SRC
* Hydra
  #+BEGIN_SRC emacs-lisp

    (use-package hydra
      :config

      (defhydra hydra-git-gutter (:body-pre (git-gutter-mode 1)
                                            :hint nil)
        "
        Git gutter:
          _j_: next hunk        _s_tage hunk     _q_uit
          _k_: previous hunk    _r_evert hunk    _Q_uit and deactivate git-gutter
          ^ ^                   _p_opup hunk
          _h_: first hunk
          _l_: last hunk        set start _R_evision
        "
        ("j" git-gutter:next-hunk)
        ("k" git-gutter:previous-hunk)
        ("h" (progn (goto-char (point-min))
                    (git-gutter:next-hunk 1)))
        ("l" (progn (goto-char (point-min))
                    (git-gutter:previous-hunk 1)))
        ("s" git-gutter:stage-hunk)
        ("r" git-gutter:revert-hunk)
        ("p" git-gutter:popup-hunk)
        ("R" git-gutter:set-start-revision)
        ("q" nil :color blue)
        ("Q" (progn (git-gutter-mode -1)
                    ;; git-gutter-fringe doesn't seem to
                    ;; clear the markup right away
                    (sit-for 0.1)
                    (git-gutter:clear))
         :color blue))

      (bind-chord "gg" 'hydra-git-gutter/body)

      (defhydra hydra-zoom (global-map "<f6>")
        "zoom"
        ("+" text-scale-increase "in")
        ("-" text-scale-decrease "out"))


      (defhydra hydra-magit (:color teal :hint nil)
        "

                                PROJECTILE: %(projectile-project-root)

                                Immuting            Mutating
                           -----------------------------------------
                             _w_: blame line      _b_: checkout
                             _a_: annotate file   _B_: branch mgr
                             _d_: diff            _c_: commit
                             _s_: status          _e_: rebase
                             _l_: log
                             _t_: time machine

                           "

        ("w" git-messenger:popup-message)
        ("a" vc-annotate)
        ("b" magit-checkout)
        ("B" magit-branch-manager)
        ("c" vc-next-action)
        ("d" magit-diff-working-tree)
        ("e" magit-interactive-rebase)
        ("s" magit-status)
        ("l" magit-log)
        ("t" git-timemachine)))

    (bind-key "C-x g" 'hydra-magit/body)

  #+END_SRC   
* Edit
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "RET") 'newline-and-indent)
    (defun copy-line (arg)
      "Copy lines (as many as prefix argument) in the kill ring.
                                       Ease of use features:
                                       - Move to start of next line.
                                       - Appends the copy on sequential calls.
                                       - Use newline as last char even on the last line of the buffer.
                                       - If region is active, copy its lines."
      (interactive "p")
      (let ((beg (line-beginning-position))
            (end (line-end-position arg)))
        (when mark-active
          (if (> (point) (mark))
              (setq beg (save-excursion (goto-char (mark)) (line-beginning-position)))
            (setq end (save-excursion (goto-char (mark)) (line-end-position)))))
        (if (eq last-command 'copy-line)
            (kill-append (buffer-substring beg end) (< end beg))
          (kill-ring-save beg end)))
      (kill-append "\n" nil)
      (beginning-of-line (or (and arg (1+ arg)) 2))
      (if (and arg (not (= 1 arg))) (message "%d lines copied" arg)))

    (defun duplicate-current-line (&optional n)
      "duplicate current line, make more than 1 copy given a numeric argument"
      (interactive "p")
      (save-excursion
        (let ((nb (or n 1))
              (current-line (thing-at-point 'line)))
          ;; when on last line, insert a newline first
          (when (or (= 1 (forward-line 1)) (eq (point) (point-max)))
            (insert "\n"))
          
          ;; now insert as many time as requested
          (while (> n 0)
            (insert current-line)
            (decf n)))))


    (bind-key "C-c k" 'copy-line)
    (bind-key "C-c l" 'duplicate-current-line)
    (bind-key "C-c j" 'join-line)

    (use-package move-text
      :bind (("C-c <up>" . move-text-up)
             ("C-c <down>" . move-text-down)))

    (defun indent-buffer ()
      (interactive)
      (save-excursion
        (indent-region (point-min) (point-max) nil)))

    (defun my/org-cleanup ()
      (interactive)
      (org-edit-special)
      (indent-buffer)
      (org-edit-src-exit))


    (bind-key "<f12>" 'my/org-cleanup)  

    (electric-indent-mode)



    (use-package expand-region
      :chords (("xx" . er/expand-region)))


  #+END_SRC
  
* company
  #+BEGIN_SRC emacs-lisp
    (use-package company 
      :config
      (add-hook 'after-init-hook 'global-company-mode)
                                            ;(company-quickhelp-mode 1)
      :diminish company-mode)
    (use-package company-quickhelp
      :config
      (company-quickhelp-mode)
      (setq company-quickhelp-delay nil)
      :diminish company-quickhelp-mode
      
      )


    (use-package company-statistics
      :config (company-statistics-mode)
      :diminish company-statistics-mode
      )

  #+END_SRC
  
* org-mode 
  #+BEGIN_SRC emacs-lisp

    (use-package org
      :defer t
      :config
(require 'ox-odt)
      (setq org-src-fontify-natively t)
      (setq org-src-tab-acts-natively t)
      (setq org-agenda-files (quote ("~/Dropbox/sync/org")))
      (setq org-todo-keywords
            '((sequence "TODO" "STARTED" "WAITING" "|" "DONE" "CANCELLED" )))

      (setq org-directory "~/Dropbox/sync/org")
      (setq org-default-notes-file (concat org-directory "/notes.org"))
      (setq org-capture-templates
            '(("t" "Simple todo" entry (file+headline (concat org-directory "/notes.org") "Tasks")
               "* TODO %?\n")
              ("b" "Bookmark" entry (file+headline (concat org-directory "/notes.org") "Bookmarks")
               "* [[%^{Url}][%^{Title}]]\n\n" :immediate-finish TRUE)
              ("e" "email todo" entry (file+headline (concat org-directory "/notes.org")  "Tasks")
               "* TODO %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n%a\n")
              ))
      (set-variable 'org-export-allow-bind-keywords t)
      (setq org-src-window-setup 'current-window)

      (org-display-inline-images t t)
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((python . t)))
      (add-to-list 'org-structure-template-alist
                   '("p" "#+BEGIN_SRC python :session \n\n#+END_SRC"))



      (defun my/beamer-to-pdf()
        
        (interactive)
        (org-beamer-export-to-pdf nil t nil nil nil))
      (bind-key "C-c e" 'my/beamer-to-pdf org-mode-map)

      (use-package ob-ipython :defer t)


      (defun org-dblock-write:rangereport (params)
        "Display day-by-day time reports."
        (let* ((ts (plist-get params :tstart))
               (te (plist-get params :tend))
               (start (time-to-seconds
                       (apply 'encode-time (org-parse-time-string ts))))
               (end (time-to-seconds
                     (apply 'encode-time (org-parse-time-string te))))
               day-numbers)
          (setq params (plist-put params :tstart nil))
          (setq params (plist-put params :end nil))
          (while (<= start end)
            (save-excursion
              (insert "\n\n"
                      (format-time-string (car org-time-stamp-formats)
                                          (seconds-to-time start))
                      "----------------\n")
              (org-dblock-write:clocktable
               (plist-put
                (plist-put
                 params
                 :tstart
                 (format-time-string (car org-time-stamp-formats)
                                     (seconds-to-time start)))
                :tend
                (format-time-string (car org-time-stamp-formats)
                                    (seconds-to-time end))))
              (setq start (+ 86400 start))))))

      (defun my-org-clocktable-indent-string (level)
        (if (= level 1)
            ""
          (let ((str "^"))
            (while (> level 2)
              (setq level (1- level)
                    str (concat str "--")))
            (concat str "-> "))))

      (advice-add 'org-clocktable-indent-string :override #'my-org-clocktable-indent-string)
      (setq org-file-apps
            '(("pdf" . "evince %s")
              ("\\.mm\\'" . default)
              ("\\.x?html?\\'" . default)))

      :bind (("C-c a"  . org-agenda)
             ("C-c c" . org-capture)))


  #+END_SRC
* ess
  #+BEGIN_SRC emacs-lisp

    (use-package ess
      :config 
      (require 'ess-site)
      (require 'ess-custom)
      (setq ess-R-font-lock-keywords

            (quote
             ((ess-R-fl-keyword:modifiers . t)
              (ess-R-fl-keyword:fun-defs . t)
              (ess-R-fl-keyword:keywords . t)
              (ess-R-fl-keyword:assign-ops . t)
              (ess-R-fl-keyword:constants . t)
              (ess-fl-keyword:fun-calls . t)
              (ess-fl-keyword:numbers . t)
              (ess-fl-keyword:operators . t)
              (ess-fl-keyword:delimiters . t)
              (ess-fl-keyword:= . t)
              (ess-R-fl-keyword:F&T . t)
              (ess-R-fl-keyword:%op% . t))))
      (setq comint-move-point-for-output t)
      (setq ess-help-own-frame nil
            ess-help-reuse-window  t)

      (defun my-ess-execute-screen-options (foo)
        "cycle through windows whose major mode is inferior-ess-mode and fix width"
        (interactive)
        (setq my-windows-list (window-list))
        (while my-windows-list
          (when (with-selected-window (car my-windows-list) (string= "inferior-ess-mode" major-mode))
            (with-selected-window (car my-windows-list) (ess-execute-screen-options t)))
          (setq my-windows-list (cdr my-windows-list))))

      (add-to-list 'window-size-change-functions 'my-ess-execute-screen-options)
      (defvar pretty-alist
        (cl-pairlis '() '()))
      (add-to-list 'pretty-alist '("%>%" . "⇛"))
      (add-to-list 'pretty-alist '("<-" . "⇐"))
      (defun pretty-things ()
        (mapc
         (lambda (x)
           (let ((word (car x))
                 (char (cdr x)))
             (font-lock-add-keywords
              nil
              `((,(concat "\\(^\\|[^a-zA-Z0-9]\\)\\(" word "\\)[a-zA-Z]")
                 (0 (progn
                      (decompose-region (match-beginning 2) (match-end 2))
                      nil)))))
             (font-lock-add-keywords
              nil
              `((,(concat "\\(^\\|[^a-zA-Z0-9]\\)\\(" word "\\)[^a-zA-Z]")
                 (0 (progn
                      (compose-region (match-beginning 2) (match-end 2)
                                      ,char)
                      nil)))))))
         pretty-alist))
      (add-hook 'ess-mode-hook 'pretty-things)
      (add-hook 'R-mode-hook
                (lambda ()
                  (font-lock-add-keywords nil
                                          '(("\\(%>%\\)" 1
                                             font-lock-builtin-face t)))))



      (defun then_R_operator ()
        "R - %>% operator or 'then' pipe operator"
        (interactive)
        (just-one-space 1)
        (insert "%>%")
        (reindent-then-newline-and-indent))
      (define-key ess-mode-map (kbd "C-%") 'then_R_operator)
      (define-key inferior-ess-mode-map (kbd "C-%") 'then_R_operator)

      (define-key ess-mode-map [tab] 'company-complete)
      (define-key inferior-ess-mode-map (kbd "TAB") 'company-complete)

      ;; Magical shift+ENTER
      ;; http://kieranhealy.org/blog/archives/2009/10/12/make-shift-enter-do-a-lot-in-ess/
      (defun my-ess-eval ()
        (interactive)
        (if (and transient-mark-mode mark-active)
            (call-interactively 'ess-eval-region)
          (call-interactively 'ess-eval-line-and-step)))
      (add-hook 'ess-mode-hook
                '(lambda()
                   (local-set-key [(shift return)] 'my-ess-eval)))
      (add-hook 'inferior-ess-mode-hook
                '(lambda()
                   (local-set-key [up] 'comint-previous-input)
                   (local-set-key [down] 'comint-next-input)))
      (add-hook 'Rnw-mode-hook
                '(lambda()
                   (local-set-key [(shift return)] 'my-ess-eval)))
      (setq tab-always-indent 'complete)
      (setq ess-tab-complete-in-script t)

      ;;(add-to-list 'company-backends 'company-ess-backend)
      (setq company-minimum-prefix-length 2))


  #+END_SRC
  
* projectile
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :defer 1 
      :config
      (projectile-global-mode)
      (setq projectile-file-exists-local-cache-expire (* 5 60)))

  #+END_SRC

* undo tree
  #+BEGIN_SRC emacs-lisp
    (use-package undo-tree
      :config
      (global-undo-tree-mode)
      (setq undo-tree-visualizer-timestamps t)
      (setq undo-tree-visualizer-diff t)
      :diminish undo-tree-mode 
      :bind ("C-z" . undo-tree-visualize))
  #+END_SRC

* highlight-tail
  #+BEGIN_SRC emacs-lisp
    (use-package highlight-tail
      :config
      (setq highlight-tail-colors '(("black" . 0)
                                    ("#bc2525" . 25)
                                    ("black" . 100)))
      (setq highlight-tail-steps 10
            highlight-tail-timer 0.05)

      (highlight-tail-reload)
      :diminish highlight-tail-mode)

  #+END_SRC
  
* helm
  #+BEGIN_SRC emacs-lisp
      (use-package helm
        :commands(helm-execute-persistent-action helm-select-action)

             
        :init
        (require 'helm-config)
        (when (executable-find "curl")
          (setq helm-net-prefer-curl t))
        (helm-mode 1)
        (setq helm-autoresize-mode 1)
           
        (bind-key "<tab>" 'helm-execute-persistent-action helm-map)
        (bind-key "C-i" 'helm-execute-persistent-action helm-map)
        (bind-key "C-z" 'helm-select-action helm-map)
        (global-set-key (kbd "C-c h") 'helm-command-prefix)  

        :diminish helm-mode
        :bind ( 
                 ("C-c h g" . helm-google-suggest)
               ("M-x" . helm-M-x)
               ("C-x f" . helm-recentf)
               ("C-x C-f" . helm-find-files)
               ("C-x b"   . helm-mini)
               ("<menu>" . helm-M-x)
               ("C-c h w" . helm-swoop)))
 
      (use-package  helm-projectile
        
        :bind (("C-c p h" . helm-projectile))
        :init
        (setq projectile-switch-project-action 'helm-projectile)
        (helm-projectile-on))

      (use-package helm-recoll
        :init
        (helm-recoll-create-source "default" "~/.recoll"))

     (use-package helm-swoop
     :config
     (setq helm-swoop-split-direction 'split-window-horizontally))
     (use-package helm-google
       :bind ("C-c C--" . helm-google))
     (use-package helm-ag)
  #+END_SRC
  
* git
  #+BEGIN_SRC emacs-lisp
    (use-package magit)
    (use-package git-timemachine)

    (use-package git-gutter-fringe
      :config
      (global-git-gutter-mode)
      :diminish git-gutter-mode)


 #+END_SRC
  
* polymode
  #+BEGIN_SRC emacs-lisp


    (defun polymode-insert-new-chunk ()
      (interactive)
      (insert "```{r}

         ``` "))

    (use-package polymode
      :defer 1
      :config
      (bind-key  "C-c C-r"  'ess-rmarkdown  polymode-mode-map)
      (add-hook 'polymode-minor-mode-hook (lambda () (
                                                      
                                                      (golden-ratio-mode -1)
                                                      ))))

    (use-package markdown-mode 
      :defer 1 
      :config 
      (require 'poly-markdown)
      (require 'poly-R)
      (add-to-list 'auto-mode-alist '("\\.Rmd" . poly-markdown+r-mode)))

    (defun save-buffer-if-visiting-file ()
      "Save the current buffer only if it is visiting a file"
      (interactive)
      (if (and (buffer-file-name) (buffer-modified-p))
          (save-buffer)))


    (defun ess-rmarkdown ()
      "Compile R markdown (.Rmd). Should work for any output type."
      (interactive)
      (when (bound-and-true-p poly-markdown+r-mode)
        (save-buffer-if-visiting-file)
                                            ; Check if attached R-session
        (condition-case nil
            (ess-get-process)
          ((error ""  ARGS)
           (ess-switch-process)))
        (let* ((rmd-buf (current-buffer)))

          (save-excursion
            (let* ((sprocess (ess-get-process ess-current-process-name))
                   (sbuffer (process-buffer sprocess))
                   (buf-coding (symbol-name buffer-file-coding-system))
                   (R-cmd
                    (format "library(rmarkdown); rmarkdown::render(\"%s\")"
                            buffer-file-name)))
              (message "Running rmarkdown on %s" buffer-file-name)
              (ess-execute R-cmd 'buffer nil nil)
              (switch-to-buffer rmd-buf)
              (ess-show-buffer (buffer-name sbuffer) nil))))))


    (defun ess-auto-rmarkdown-enable ()
      (interactive)
      (run-with-idle-timer 1 t #'ess-rmarkdown))
  #+END_SRC
  
* password-store
#+BEGIN_SRC emacs-lisp
  (defun password-store-show (entry)
    "show existing password for ENTRY."
    (interactive (list (password-store--completing-read)))
    (with-output-to-temp-buffer "*PW entry*"
      (princ (concat "entry:    " entry "\npassword: " (password-store--run-show entry)))))

  (use-package password-store
    :config
    (bind-key "C-c t c" 'password-store-copy)
    (bind-key "C-c t e" 'password-store-edit)
    (bind-key "C-c t s" 'password-store-show))

#+END_SRC
* Keychord
  #+BEGIN_SRC emacs-lisp

    (use-package key-chord
      :config
      (key-chord-mode 1)
      (bind-chord "uu" 'undo)) 



      ;; (bind-chord "jl"
      ;;             (defhydra join-lines ()
      ;;               ("<up>" join-line)
      ;;               ("<down>" (join-line 1))
      ;;               ("t" join-line)
      ;;               ("n" (join-line 1))
      ;;               ("q" nil :color blue))))




 #+END_SRC 
  
* cider
  #+BEGIN_SRC emacs-lisp
    (use-package cider
      :defer t)

    (defun my-clojure-mode-hook ()
      (clj-refactor-mode 1)
      (yas-minor-mode 1) ; for adding require/use/import
      (cljr-add-keybindings-with-prefix "C-c C-m"))
    ;(use-package cider-eval-sexp-fu)
    (use-package clj-refactor
      :defer t
      :config
      (clj-refactor-mode 1)
      (yas-minor-mode 1) ; for adding require/use/import
      (cljr-add-keybindings-with-prefix "C-c C-m")
      (add-hook 'clojure-mode-hook #'my-clojure-mode-hook))


  #+END_SRC
* other
  #+BEGIN_SRC emacs-lisp
    (setq browse-url-generic-program (executable-find "conkeror"))
    (setq browse-url-browser-function 'browse-url-generic)

    (use-package focus)

    (use-package google-this
      :config
      (global-set-key (kbd "C-c g") 'google-this-mode-submap))



    (use-package which-key 
      :defer 2
      :config (which-key-mode)
      :diminish  which-key-mode)



    (defun hide-eol ()
      "Do not show ^M in files containing mixed UNIX and DOS line endings."
      (interactive)
      (setq buffer-display-table (make-display-table))
      (aset buffer-display-table ?\^M []))

    (defun clear-shell ()
      (interactive)
      (let ((old-max comint-buffer-maximum-size))
        (setq comint-buffer-maximum-size 0)
        (comint-truncate-buffer)
        (setq comint-buffer-maximum-size old-max)))

    (use-package rainbow-delimiters
      :config
      (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))

    (use-package keyfreq
      :config
      (keyfreq-mode 1)
      (keyfreq-autosave-mode 1))

    (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
    (fset 'yes-or-no-p 'y-or-n-p)

    (use-package calfw
      :defer 1
      :config
      (require 'calfw-org)
      (bind-key "C-c m" 'cfw:open-org-calendar)
      (setq calendar-holidays '()))

    (defun sudo-edit (&optional arg)
      (interactive "P")
      (if (or arg (not buffer-file-name))
          (find-file (concat "/sudo:root@localhost:"
                             (ido-read-file-name "Find file(as root): ")))
        (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))

    (use-package pandoc-mode
      :defer t
      :config
      (add-hook 'markdown-mode-hook 'pandoc-mode))


    (defun save-all-and-compile ()
      (interactive)
      (save-some-buffers 1)
      (compile compile-command))

    (global-set-key [f5] 'save-all-and-compile)

    (setq skeleton-pair t)


    (use-package sunrise-commander :defer t)


    (use-package shell-pop
      :bind ("<f9>" . shell-pop)
      :config  (use-package shell  
                 :bind ("TAB" . company-complete)))


    (setq linum-format "%4d")

    (winner-mode) 

    (use-package anzu
      
      :bind(("M-%" . anzu-query-replace)
            ("M-C-%" . anzu-query-replace-regexp))
      :config
      (global-anzu-mode 1)
      (set-face-attribute 'anzu-mode-line nil
                          :foreground "orange" :weight 'bold))


    (use-package aggressive-indent
      :config
      (global-aggressive-indent-mode 1)
      (add-to-list 'aggressive-indent-excluded-modes 'poly-markdown+r-mode)
      )

    (use-package discover-my-major)
    ;;(use-package yaml-mode)

    (windmove-default-keybindings 'super)


    (use-package dash-functional)
    (defmacro my/convert-shell-scripts-to-interactive-commands (directory)
      "Make the shell scripts in DIRECTORY available as interactive commands."
      (cons 'progn
            (-map
             (lambda (filename)
               (let ((function-name (intern (concat "my/shell/" (file-name-nondirectory filename)))))
                 `(defun ,function-name (&rest args)
                    (interactive)
                    (apply 'call-process ,filename nil nil nil args))))
             (-filter (-not #'file-directory-p)
                      (-filter #'file-executable-p (directory-files directory t))))))

    (my/convert-shell-scripts-to-interactive-commands "~/bin")

  #+END_SRC
* Python
  #+BEGIN_SRC emacs-lisp
   
    (use-package jedi
      :defer 1
      :config 
      (use-package company-quickhelp)
      (use-package company-jedi)
      (defun my/python-mode-hook ()
        (jedi-mode)
        (company-quickhelp-mode)
        (add-to-list 'company-backends 'company-jedi))
      (setq jedi:complete-on-dot t)
      (add-hook 'python-mode-hook 'my/python-mode-hook))
     
    (use-package pyvenv 
     :defer 1
     :config
      (pyvenv-activate "~/miniconda/envs/dataScience")
       (setq
            python-shell-interpreter "ipython"
            org-babel-python-command "ipython"))

    (defun python-shell-completion-complete-or-indent ()
      "Complete or indent depending on the context.
    If content before pointer is all whitespace, indent.
    If not try to complete."
      (interactive)
      (if (string-match "^[[:space:]]*$"
                        (buffer-substring (comint-line-beginning-position)
                                          (point-marker)))
          (indent-for-tab-command)
        (company-complete)))
  #+END_SRC 

* ein   
  #+BEGIN_SRC emacs-lisp
    (use-package ein
          :defer t
          :config
            (setq ein:use-auto-complete-superpack t)
            (defun my/ein-mode-hook ()
               (company-mode 0)
               (auto-complete-mode 1))
            (add-hook 'ein:notebook-mode-hook 'my/ein-mode-hook))
(require 'popup)
  #+END_SRC

* Dired
  #+BEGIN_SRC emacs-lisp


    (defun xah-dired-sort ()
      "Sort dired dir listing in different ways.
            Prompt for a choice.
            URL `http://ergoemacs.org/emacs/dired_sort.html'
            Version 2015-07-30"
      (interactive)
      (let (ξsort-by ξarg)
        (setq ξsort-by (ido-completing-read "Sort by:" '( "date" "size" "name")))
        (cond
         ((equal ξsort-by "name") (setq ξarg "-Al --si --time-style long-iso --group-directories-first"))
         ((equal ξsort-by "date") (setq ξarg "-Al --si --time-style long-iso -t --group-directories-first"))
         ((equal ξsort-by "size") (setq ξarg "-Al --si --time-style long-iso -S --group-directories-first"))

         (t (error "logic error 09535" )))
        (dired-sort-other ξarg )))


    (use-package dired+ 
      
      :config
      (bind-key  "c"  'xah-dired-sort  dired-mode-map)
      (setq dired-dwim-target t)
      (setq dired-recursive-copies (quote always)) ; “always” means no asking
      (setq dired-recursive-deletes (quote top)) ; “top” means ask once
      (diredp-toggle-find-file-reuse-dir 1)

      (set-face-background diredp-dir-priv nil)
      (set-face-background diredp-exec-priv nil)
      (set-face-background diredp-no-priv nil)
      (set-face-background diredp-rare-priv nil)
      (set-face-background diredp-read-priv nil)
      (set-face-background diredp-write-priv nil)
      )

    ;;; Toggle showing dot-files using "."
    ;; (define-minor-mode dired-hide-dotfiles-mode
    ;;   ""
    ;;   :lighter " Hide"
    ;;   :init-value nil
    ;;   (if (not (eq major-mode 'dired-mode))
    ;;       (progn 
    ;;         (error "Doesn't seem to be a Dired buffer")
    ;;         (setq dired-hide-dotfiles-mode nil))
    ;;     (if dired-hide-dotfiles-mode
    ;;         (setq dired-actual-switches "-lh --group-directories-first")
    ;;       (setq dired-actual-switches "-lAh --group-directories-first"))
    ;;     (revert-buffer)))
    ;; (define-key dired-mode-map "." 'dired-hide-dotfiles-mode)
    ;; (add-hook 'dired-mode-hook (lambda () (dired-hide-dotfiles-mode 0)))
    (use-package dired-filter
      :config
      (setq dired-filter-inherit-filter-stack t)
      )
  #+END_SRC 
* smart parents
#+BEGIN_SRC emacs-lisp

  (setq sp-base-key-bindings 'sp)

  (use-package smartparens-config
    :ensure smartparens
    :init
    (progn
      (show-smartparens-global-mode t)))

  (add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)
  (add-hook 'markdown-mode-hook 'turn-on-smartparens-strict-mode)

#+END_SRC
* ace
#+BEGIN_SRC emacs-lisp

  (use-package ace-jump-mode
    :chords (("jj" . ace-jump-char-mode)
             ("jk" . ace-jump-word-mode)
             ("jl" . ace-jump-line-mode)))
#+END_SRC
* mu4e
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")
    (require 'mu4e)
    (require 'mu4e-contrib)
    (require 'org-mu4e)


    (when (string= system-name "LAP-2013-00026.efsa.eu.int")      
      (setq mu4e-maildir "/media/sda3/Dropbox/maildir"))
    (when (string= system-name "gandalf")      
      (setq mu4e-maildir "~/Dropbox/maildir"))



    (setq
     mu4e-get-mail-command "offlineimap"
     mu4e-update-interval 600
     mu4e-use-fancy-chars t
     message-kill-buffer-on-exit t
     mu4e-user-mail-address-list '("carsten.behring@efsa.europa.eu" "carsten.behring@gmail.com")
     mu4e-view-show-images t
     user-full-name  "Carsten Behring"
     mu4e-html2text-command "w3m -dump -T text/html"
     org-mu4e-link-query-in-headers-mode nil
     mu4e-attachment-dir "~/Downloads"

     mu4e-headers-fields
     '( (:human-date    .   12)
        (:flags         .    6)
        (:mailing-list  .   10)
        (:maildir      .   30)
        (:from          .   22)
        (:subject       .   nil))


     mu4e-contexts
     `( ,(make-mu4e-context
          :name "gmail"
          
          :enter-func (lambda () (mu4e-message "Switch to the gmail context"))
          ;; leave-func not defined
          ;;:match-func 
          :vars '(( user-mail-address      . "carsten.behring@gmail.com")
                  ( mu4e-bookmarks         . ( ("m:/gmail/INBOX flag:unread AND NOT flag:trashed" "Unread messages"      ?u)))
                  ( mu4e-maildir-shortcuts .
                                           ( ("/gmail/INBOX"               . ?i)
                                             ("/gmail/[Gmail].Sent Mail"   . ?s)
                                             ("/gmail/[Gmail].Trash"       . ?t)
                                             ("/gmail/[Gmail].All Mail"    . ?a))
                                           )
                  (mu4e-drafts-folder .  "/gmail/[Gmail].Drafts")
                  (mu4e-sent-folder   .  "/gmail/[Gmail].Sent Mail")
                  (mu4e-trash-folder  .  "/gmail/[Gmail].Trash")
                  (mu4e-sent-messages-behavior . delete)
                  (message-send-mail-function . smtpmail-send-it)  
                  (smtpmail-stream-type . starttls)
                  (smtpmail-default-smtp-server . "smtp.gmail.com")
                  (smtpmail-smtp-server . "smtp.gmail.com")
                  (smtpmail-smtp-service . 587)
                  (message-kill-buffer-on-exit . t)
                  ) 
          )
        ,(make-mu4e-context
          :name "efsa"
          :enter-func (lambda () (mu4e-message "Switch to the efsa context"))
          ;; leave-fun not defined
          ;;:match-func 
          :vars '(( user-mail-address      . "carsten.behring@efsa.europa.eu")
                  (user-full-name . "BEHRING Carsten")
                  ( mu4e-bookmarks            .
                                              ( ("m:/efsa/INBOX AND flag:unread AND NOT flag:trashed" "Unread messages"      ?u)))
                  (mu4e-maildir-shortcuts . (("/efsa/INBOX" . ?i)))
                  (mu4e-sent-folder .  "/efsa/Sent")       ;; folder for sent mess ages
                  (mu4e-drafts-folder . "/efsa/Drafts")     ;; unfinished messages
                  (mu4e-trash-folder . "/efsa/Trash")      ;; trashed messages
                  (mu4e-refile-folder . "/efsa/archive")
                  (message-send-mail-function . smtpmail-send-it)
                  (smtpmail-default-smtp-server . "localhost")
                  (smtpmail-smtp-service . 1025)
                  (smtpmail-smtp-server . "localhost")


                  ))) 




     )
    (add-to-list 'mu4e-view-actions

                 '("ViewInBrowser" . mu4e-action-view-in-browser) t)



  #+END_SRC 

* start server
  #+BEGIN_SRC emacs-lisp
    (server-start)
  #+END_SRC 

* exwm
  #+BEGIN_SRC emacs-lisp
    (defvar dropbox-status nil)

    (defun update-dropbox-status ()
      (interactive)
      (setq dropbox-status (car (split-string (shell-command-to-string "dropbox status") "\n"))))
    (run-with-timer 1 (* 1 10) 'update-dropbox-status)
    (use-package exwm 
      :disabled t
      :config
      (require 'exwm-config)
      (setq exwm-workspace-number 10)
      (exwm-config-default)
      (exwm-input-set-simulation-keys nil)

      (exwm-input-set-key (kbd "s-l")
                          (lambda () (interactive) (start-process "" nil "slock"))) 
      (exwm-input-set-key (kbd "s-c")
                          (lambda () (interactive) (start-process "" nil "chromium-browser"))) 
      (exwm-input-set-key (kbd "s-t")
                          (lambda () (interactive) (start-process "" nil "gnome-terminal"))) 
      (exwm-input-set-key (kbd "s-m")
                          (lambda () (interactive) (start-process "" nil "chromium-browser" "http://www.efsa.europa.eu/webmail"))) 

      (setq global-mode-string  '("db:" dropbox-status
                                  " "
                                  "[ws:" (:eval (format "%s" exwm-workspace-current-index)) "] " display-time-string))
      (exwm-input-set-key (kbd "s-f") #'exwm-layout-set-fullscreen)      
      (setq exwm-workspace-show-all-buffers t)
      (setq exwm-layout-show-all-buffers t)

      (when (string= system-name "LAP-2013-00026.efsa.eu.int")

        (require 'exwm-randr)
        (defun xrandr-output-list-vga1 ()
          (interactive)
          (setq exwm-randr-workspace-output-plist '(0 "LVDS1" 1 "LVDS1" 2 "LVDS1" 3 "LVDS1" 4 "LVDS1" 5 "VGA1" 6 "VGA1" 7 "VGA1" 8 "VGA1"  9 "VGA1" ))
          (exwm-randr--refresh))

        (defun xrandr-output-list-hdmi2 ()
          (interactive)
          (setq exwm-randr-workspace-output-plist '(0 "LVDS1" 1 "LVDS1" 2 "LVDS1" 3 "LVDS1" 4 "LVDS1" 5 "HDMI2" 6 "HDMI2" 7 "HDMI2" 8 "HDMI2"  9 "HDMI2" ))
          
          (exwm-randr--refresh))

        

        (setq exwm-randr-workspace-output-plist '(0 "LVDS1" 1 "LVDS1" 2 "LVDS1" 3 "LVDS1" 4 "LVDS1" 5 "HDMI2" 6 "HDMI2" 7 "HDMI2" 8 "HDMI2"  9 "HDMI2" ))
        (add-hook 'exwm-randr-screen-change-hook
                  (lambda ()
                    (start-process-shell-command
                     "xrandr" nil "xrandr --output HDMI2 --auto --output LVDS1 --auto --left-of HDMI2")))
        (exwm-randr-enable)))

  #+END_SRC
  
* golden
#+BEGIN_SRC emacs-lisp 
  (use-package golden-ratio
    :diminish golden-ratio-mode
    :config
    (add-to-list 'golden-ratio-exclude-modes 'poly-markdown+r-mode))


    (defvar golden-ratio-selected-window
      (frame-selected-window)
      "Selected window.")

    (defun golden-ratio-set-selected-window
        (&optional window)
      "Set selected window to WINDOW."
      (setq-default
       golden-ratio-selected-window (or window (frame-selected-window))))

    (defun golden-ratio-selected-window-p
        (&optional window)
      "Return t if WINDOW is selected window."
      (eq (or window (selected-window))
          (default-value 'golden-ratio-selected-window)))

    (defun golden-ratio-maybe
        (&optional arg)
      "Run `golden-ratio' if `golden-ratio-selected-window-p' returns nil."
      (interactive "p")
      (unless (golden-ratio-selected-window-p)
        (golden-ratio-set-selected-window)
        (golden-ratio arg)))

    (add-hook 'buffer-list-update-hook #'golden-ratio-maybe)
    (add-hook 'focus-in-hook           #'golden-ratio)
    (add-hook 'focus-out-hook          #'golden-ratio)
    (golden-ratio-mode 1)

#+END_SRC

* print init time  
#+BEGIN_SRC emacs-lisp 
(setq after-init-time (current-time))
(message "Config successfully loaded in %s" (emacs-init-time))

#+END_SRC
 

  




 


